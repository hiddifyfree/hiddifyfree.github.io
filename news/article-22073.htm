<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://hiddifyfree.github.io/news/article-22073.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Halo 开源项目学习实体类与数据表</title>
        <meta name="description" content="基本介绍 Halo 项目中定义了一些实体类，用于存储博客中的关键数据，如用户信息、文章信息等。在深入学习 Halo 的设计理念与实现过程之前，不妨先学习一下一个完整的博客系统都由哪些元素组成。 实体类" />
        <link rel="icon" href="/assets/website/img/hiddifyfree/favicon.ico" type="image/x-icon"/>
    <!-- stylesheet css -->
    <link rel="stylesheet" href="/assets/website/css/hiddifyfree/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/hiddifyfree/font-awesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/hiddifyfree/nivo-lightbox.css">
    <link rel="stylesheet" href="/assets/website/css/hiddifyfree/nivo_themes/default/default.css">
    <link rel="stylesheet" href="/assets/website/css/hiddifyfree/style.css">
    <!-- google web font css -->
    <link href='http://fonts.googleapis.com/css?family=Raleway:400,300,600,700' rel='stylesheet' type='text/css'>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FSSSCJKV0R"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FSSSCJKV0R');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-spy="scroll" data-target=".navbar-collapse" data-page="detail">
        <!-- navigation -->
    <div class="navbar navbar-default navbar-fixed-top" role="navigation">
        <div class="container">
            <div class="navbar-header">
                <button class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon icon-bar"></span>
                    <span class="icon icon-bar"></span>
                    <span class="icon icon-bar"></span>
                </button>
                                <a href="/" class="navbar-brand"><span>Hiddify Free</span></a>
                            </div>
            <div class="collapse navbar-collapse">
                <ul class="nav navbar-nav navbar-right">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </div>
        </div>
    </div>
    <!-- home section -->
    <div id="home">
        <div class="container">
            <div class="row">
                <div class="col-md-offset-6 col-md-6 col-sm-offset-6 col-sm-6">
                    <h1>Halo 开源项目学习实体类与数据表</h1>
                    <p>
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- about section -->
    <div id="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h2 id="基本介绍">基本介绍</h2> <p>Halo 项目中定义了一些实体类，用于存储博客中的关键数据，如用户信息、文章信息等。在深入学习 Halo 的设计理念与实现过程之前，不妨先学习一下一个完整的博客系统都由哪些元素组成。</p> <h2 id="实体类">实体类</h2> <p>Halo 中的除 BaseEntity 外的每一个实体类都对应着一个数据表，以 User 类为例，每一个 User 对象都对应 users 表中的一条记录，每一个对象属性的值也等于数据表中对应字段的值。</p> <p>User 类定义如下：</p> <pre><code class="language-java">@Data // Lombok 注解, 自动生成 get()、set()、toString() 等方法 @Entity // JPA 注解, 声明该类为一个实体类, 必须与 @Id 搭配使用 @Table(name = "users") // JAP 注解, 声明该类映射到数据库的 users 数据表 @ToString(callSuper = true) // Lombok 注解, callSuper = true 表示调用 toString() 方法时输出父类的属性 @EqualsAndHashCode(callSuper = true) // 自动生成 equals() 和 hashCode() 方法, 默认 callSuper 为 false, 为 true 表示 equals() 方法比较时会调用父类的 equals() 方法 public class User extends BaseEntity {      @Id // JPA 注解, 声明主键     @GeneratedValue(strategy = GenerationType.IDENTITY) // JPA 注解, 声明主键的生成策略, IDENTITY 表示使用自增 id     @Column(name = "id") // JPA 注解, 声明实体类的属性 id 映射到数据表中的字段 id     private Integer id;      /**      * User name.      */     @Column(name = "username", columnDefinition = "varchar(50) not null")     private String username;      /**      * User nick name,used to display on page.      */     @Column(name = "nickname", columnDefinition = "varchar(255) not null")     private String nickname;      /**      * Password.      */     @Column(name = "password", columnDefinition = "varchar(255) not null")     private String password;      /**      * User email.      */     @Column(name = "email", columnDefinition = "varchar(127) default ''")     private String email;      /**      * User avatar.      */     @Column(name = "avatar", columnDefinition = "varchar(1023) default ''")     private String avatar;      /**      * User description.      */     @Column(name = "description", columnDefinition = "varchar(1023) default ''")     private String description;      /**      * Expire time.      */     @Column(name = "expire_time", columnDefinition = "timestamp default CURRENT_TIMESTAMP")     @Temporal(TemporalType.TIMESTAMP)     private Date expireTime;       @Override     public void prePersist() {         super.prePersist();          id = null;          if (email == null) {             email = "";         }          if (avatar == null) {             avatar = "";         }          if (description == null) {             description = "";         }          if (expireTime == null) {             expireTime = DateUtils.now();         }     } }</code></pre> <p>注解解释：</p> <ul> <li> <p>@Data：Lombok 注解，自动生成 get()、set()、toString() 等方法。</p> </li> <li> <p>@Entity：JPA 注解，声明该类为一个实体类, 必须与 @Id 搭配使用。</p> </li> <li> <p>@Table：JAP 注解，声明该类对应数据库中的某个数据表，name 指明表名。</p> </li> <li> <p>@ToString：lombok 注解，callSuper = true 表示调用 toString() 方法时会输出父类的属性。</p> </li> <li> <p>@EqualsAndHashCode：自动生成 equals() 和 hashCode() 方法，默认 callSuper 为 false, 为 true 表示 equals() 在方法比较时会调用父类的 equals()（如果父类的 equals() 返回 false，则直接返回 false，否则继续比较）。</p> </li> <li> <p>@Id：JPA 注解，声明主键。</p> </li> <li> <p>@GeneratedValue：JPA 注解，声明主键的生成策略，IDENTITY 表示使用自增 id。</p> </li> <li> <p>@Column：JPA 注解，声明实体对象的属性映射到数据表中的哪一个字段，name 指定字段名，columnDefinition 指定字段的定义。</p> </li> </ul> <p>User 类中定义了用户名、昵称、邮箱等用户数据，Halo 使用 JPA 将实体对象持久化到数据库中，也就是将 User 对象的各个属性存储到数据表 users 的各个字段中。JPA 支持自动创建数据表，所以启动项目前无需建表，关于 JPA 的使用，可以参考<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://segmentfault.com/a/1190000040814227"  target="_blank" rel="nofollow">SpringBoot 整合 Spring Data JPA</a>。</p> <p>User 类继承了 BaseEntity，BaseEntity 类中定义了一些通用的属性，如 createTime、updateTime 以及 deleted 等，分别指用户的创建时间、修改时间以及是否被删除，users 表中有对应的字段。此外，BaseEntity 类还定义了三个方法，分别为 prePersist()、preUpdate() 和 preRemove()：</p> <ul> <li> <p>prePersist() 方法在对象持久化到数据库之前被调用。</p> </li> <li> <p>preUpdate() 方法在对象的某个属性发生变动时被调用，如更新实体的 update_time。</p> </li> <li> <p>preRemove() 方法在对象从数据库删除前被调用。</p> </li> </ul> <p>BaseEntity 并没有对应某一个数据表，它被 @MappedSuperclass 修饰， @MappedSuperclass 属于 JPA 注解，应用于实体类的父类中, 该注解作用的类不会映射到数据表，但其属性都将映射到子类所对应的数据表。也就是说不同实体类的通用属性可在相同的父类中定义，子类继承父类后，父类中的这些通用属性会持久化到子类对应的数据表中。</p> <p>BaseEntity 类定义如下：</p> <pre><code class="language-java">@Data @ToString @MappedSuperclass // JPA 注解, 应用于实体类的父类中, 该注解作用的类不会映射到数据表，但其属性都将映射到子类的数据表 @EqualsAndHashCode public class BaseEntity {      /**      * Create time.      */     @Column(name = "create_time", columnDefinition = "timestamp default CURRENT_TIMESTAMP")     @Temporal(TemporalType.TIMESTAMP)     private Date createTime;      /**      * Update time.      */     @Column(name = "update_time", columnDefinition = "timestamp default CURRENT_TIMESTAMP")     @Temporal(TemporalType.TIMESTAMP)     private Date updateTime;      /**      * Delete flag.      */     @Column(name = "deleted", columnDefinition = "TINYINT default 0")     private Boolean deleted = false;      @PrePersist // @PrePersist 事件在实体对象插入到数据库的过程中发生     protected void prePersist() {         deleted = false;         Date now = DateUtils.now();         if (createTime == null) {             createTime = now;         }          if (updateTime == null) {             updateTime = now;         }     }      @PreUpdate // @PreUpdate 事件在实体的状态同步到数据库之前触发     protected void preUpdate() {         updateTime = new Date();     }      @PreRemove // @PreRemove 事件在实体从数据库删除之前触发     protected void preRemove() {         updateTime = new Date();     } }</code></pre> <h2 id="数据表">数据表</h2> <p>项目启动成功后，JPA 会为实体类自动生成对应的数据表。可以使用 Navicat 查看 MySQL 中库名为 'halodb' 的数据库（自己配置的库名），发现自动创建了如下数据表：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/0b31bfbc61c911584860b6b60a06a8ab.jpg" alt="Halo 开源项目学习实体类与数据表"></p> <p>下面介绍不同数据表的作用以及对应的字段含义，由于许多实体类都继承自 BaseEntity，所以不同数据表中会有一些通用的字段，如：</p> <ul> <li> <p><code>id</code>：主键（虽不在 BaseEntity 中定义，但每个子类中都存在）。</p> </li> <li> <p><code>crate_time</code>：创建时间。</p> </li> <li> <p><code>deleted</code>：是否已经删除。</p> </li> <li> <p><code>update_time</code>：更新时间。</p> </li> </ul> <p>下面介绍各个数据表中，特定字段的具体含义:</p> <p><strong>1. attachments</strong>：附件表，用于存放图片和文件。</p> <ul> <li> <p><code>file_key</code>：文件的 key，可以根据 file_key 删除文件。</p> </li> <li> <p><code>height</code>：图片高度。</p> </li> <li> <p><code>media_type</code>：媒体类型，如 text/html、image/jpeg 等。</p> </li> <li> <p><code>name</code>：附件的名字。</p> </li> <li> <p><code>path</code>：附件的存储路径。</p> </li> <li> <p><code>size</code>：附件的大小。</p> </li> <li> <p><code>suffix</code>：附件的后缀，如 png、html 等。</p> </li> <li> <p><code>thumb_path</code>：缩略图的访问路径，该路径指定的资源可用作为封面图。</p> </li> <li> <p><code>type</code>：附件的上传类型，如上传到本地（type 为 0）、阿里云（type 为 4）。</p> </li> <li> <p><code>width</code>：图片宽度。</p> </li> </ul> <p><strong>2. categories</strong>：文章分类目录表，发布文章时可设置文章所属的分类。</p> <ul> <li> <p><code>decryption</code>：描述。</p> </li> <li> <p><code>name</code>：分类名。</p> </li> <li> <p><code>parent_id</code>：父目录 id。</p> </li> <li> <p><code>password</code>：密码。</p> </li> <li> <p><code>slug</code>：别名。</p> </li> <li> <p><code>slug_name</code>：项目中没有用到。</p> </li> <li> <p><code>thumbnail</code>：分类的封面图。</p> </li> </ul> <p><strong>3. comment_black_list</strong>：评论黑名单表，用于禁止某个 ip 进行评论。</p> <ul> <li> <p><code>ban_time</code>：封禁时间。</p> </li> <li> <p><code>ip_address</code>：封禁的 ip。</p> </li> </ul> <p><strong>4. comments</strong>：评论表，可对文章进行评论，也可对评论进行回复，还可以对页面（友情链接、图库、日志等）进行评论。</p> <ul> <li> <p><code>type</code>：给文章进行评论时 type 为 0，给页面进行评论时 type 为 1。</p> </li> <li> <p><code>allow_notification</code>：是否允许通知。</p> </li> <li> <p><code>author</code>：评论者的姓名。</p> </li> <li> <p><code>author_url</code>：评论者的 url。</p> </li> <li> <p><code>content</code>：评论内容。</p> </li> <li> <p><code>email</code>：评论者的 email。</p> </li> <li> <p><code>gravatar_md5</code>：评论者的头像。</p> </li> <li> <p><code>ip_address</code>：评论者的 ip。</p> </li> <li> <p><code>is_admin</code>：评论者是否为博主。</p> </li> <li> <p><code>parent_id</code>：如果回复某个评论，则 parent_id 为该评论的 id；如果评论文章，则 parent_id 为 0。</p> </li> <li> <p><code>post_id</code>：哪篇文章或哪个页面的评论。</p> </li> <li> <p><code>status</code>：评论的状态，0 表示已发布，1 表示待发布，2 表示添加到了回收站。</p> </li> <li> <p><code>top_priority</code>：是否置顶。</p> </li> <li> <p><code>user_agent</code>：用户代理，例如浏览器。</p> </li> </ul> <p><strong>5. journals</strong>：用户日志表，在 Halo 中用户可以对外分享日志（记录生活的日志），日志的信息存储在 journals 表中。</p> <ul> <li> <p><code>content</code>：日志内容。</p> </li> <li> <p><code>likes</code>：点赞量。</p> </li> <li> <p><code>source_content</code>：原始内容。</p> </li> <li> <p><code>type</code>：日志类型，公开日志的 type 为 0，私密日志的 type 为 1。</p> </li> </ul> <p><strong>6. links</strong>：友情链接表，用于访问其他博客或资源。</p> <ul> <li> <p><code>description</code>：描述。</p> </li> <li> <p><code>logo</code>：标志。</p> </li> <li> <p><code>name</code>：名称。</p> </li> <li> <p><code>priority</code>：排序编号。</p> </li> <li> <p><code>team</code>：所属分组。</p> </li> <li> <p><code>url</code>：链接。</p> </li> </ul> <p><strong>7. logs</strong>：系统日志表，记录用户的操作。</p> <ul> <li> <p><code>content</code>：日志内容。</p> </li> <li> <p><code>ip_address</code>：操作者的 ip。</p> </li> <li> <p><code>log_key</code>：log_key 通常为操作对象的标识，例如发布文章时 log_key 是文章的 id，用户登录时 log_key 是用户的 userName。</p> </li> <li> <p><code>type</code>：日志类型，例如发表文章时 type 为 5，登录时 type 为 25。</p> </li> </ul> <p><strong>8. menus</strong>：菜单表，博客的主页有多个菜单，且每个菜单都可以是多级菜单。</p> <ul> <li> <p><code>icon</code>：图标。</p> </li> <li> <p><code>name</code>：名称</p> </li> <li> <p><code>parent_id</code>：父级菜单的 id。</p> </li> <li> <p><code>priority</code>：优先级，用于博客首页上菜单的排序。</p> </li> <li> <p><code>target</code>：可选 _self 和 _blank，_self 表示在当前页面打开菜单所指向的链接；_blank 表示在新的页面打开链接。</p> </li> <li> <p><code>team</code>：所属分组。</p> </li> <li> <p><code>url</code>：菜单所指向的链接。</p> </li> </ul> <p><strong>9. metas</strong>：元数据表，用于设置文章或页面的属性，可在发布文章或页面时的 "高级" 选项中进行操作。</p> <ul> <li> <p><code>type</code>：设置文章的元数据时 type 为 0，设置页面的元数据时 type 为 1。</p> </li> <li> <p><code>mate_key</code>：元数据 key 可以设置文章是否支持点赞、是否支持复制等。</p> </li> <li> <p><code>mate_value</code>：key 对应的值</p> </li> <li> <p><code>post_id</code>: 文章或页面的 id。</p> </li> </ul> <p><strong>10. options</strong>：博客设置表，或者称为选项表，用于存储系统设置的相关信息。用户可在 Dashboard 界面的 "系统" -&gt; "博客设置" 中进行配置。</p> <ul> <li> <p><code>option_key</code>：博客的选项，例如博客标题 blog_title、主题 theme、是否已安装 is_installed 等。</p> </li> <li> <p><code>type</code>：博客的内部选项的 type 为 0，自定义选项的 type 为 1。</p> </li> <li> <p><code>option_value</code>：选项对应的值。</p> </li> </ul> <p><strong>11. photos</strong>：图片表，Halo 可以设置图库，图库页面的图片存放在 photos 表中。</p> <ul> <li> <p><code>description</code>：描述。</p> </li> <li> <p><code>likes</code>：点赞量。</p> </li> <li> <p><code>location</code>：拍摄地点。</p> </li> <li> <p><code>name</code>：名称。</p> </li> <li> <p><code>take_time</code>：拍摄日期。</p> </li> <li> <p><code>team</code>：所属分组。</p> </li> <li> <p><code>thumbnail</code>：缩略图地址。</p> </li> <li> <p><code>url</code>：图片链接。</p> </li> </ul> <p><strong>12. post_categories</strong>：文章 - 分类的关系表，记录每个文章属于哪个分类。</p> <ul> <li> <p><code>category_id</code>：分类 id。</p> </li> <li> <p><code>post_id</code>：文章 id。</p> </li> </ul> <p><strong>13. post_tags</strong>：文章标签表，记录文章的标签。</p> <ul> <li> <p><code>post_id</code>：文章 id。</p> </li> <li> <p><code>tag_id</code>：标签 id。</p> </li> </ul> <p><strong>14. posts</strong>：文章表，也用来存储页面。</p> <ul> <li> <p><code>type</code>：文章的 type 为 0，页面的 type 为 1。</p> </li> <li> <p><code>disallow_comment</code>：是否关闭评论。</p> </li> <li> <p><code>edit_time</code>：编辑时间。</p> </li> <li> <p><code>editor_type</code>：编辑器类型。</p> </li> <li> <p><code>format_content</code>：格式化后的内容。</p> </li> <li> <p><code>likes</code>：点赞量。</p> </li> <li> <p><code>meta_description</code>：自定义描述。</p> </li> <li> <p><code>meta_keywords</code>：自定义关键词。</p> </li> <li> <p><code>original_content</code>：原始内容。</p> </li> <li> <p><code>password</code>：密码。</p> </li> <li> <p><code>slug</code>：别名。</p> </li> <li> <p><code>status</code>：状态，0 表示已发布，1 表示待发布，2 表示位于回收站，3 表示私密文章或页面。</p> </li> <li> <p><code>summary</code>：文章摘要。</p> </li> <li> <p><code>template</code>：自定义的模板，新增页面时可设置模板。</p> </li> <li> <p><code>thumbnail</code>：封面图。</p> </li> <li> <p><code>title</code>：标题。</p> </li> <li> <p><code>top_priority</code>：是否置顶。</p> </li> <li> <p><code>url</code>：链接。</p> </li> <li> <p><code>visits</code>：访问量。</p> </li> <li> <p><code>word_count</code>：字数统计。</p> </li> </ul> <p><strong>15. tags</strong>：标签表，发布文章时，可为文章设置标签。</p> <ul> <li> <p><code>name</code>：标签名称。</p> </li> <li> <p><code>slug</code>：别名。</p> </li> <li> <p><code>slug_name</code>：项目中没有用到。</p> </li> <li> <p><code>thumbnail</code>：标签的封面图。</p> </li> </ul> <p><strong>16. theme_settings</strong>：主题设置表，设置博客主题。</p> <ul> <li> <p><code>setting_key</code>：主题中可设置的选项，例如文章标题是否大写 post_title_uppper、博客首页的邮箱 email 等。</p> </li> <li> <p><code>theme_id</code>：主题的 id。</p> </li> <li> <p><code>setting_value</code>：setting_key 对应的值。</p> </li> </ul> <p><strong>17. users</strong>：用户表，记录用户信息。</p> <ul> <li> <p><code>avatar</code>：头像。</p> </li> <li> <p><code>decription</code>：描述。</p> </li> <li> <p><code>email</code>：邮箱。</p> </li> <li> <p><code>expire_time</code>：过期时间，严格来说应该称为账号的起始有效时间，当前时间超过 expire_time 时，该账号才能正常登录。</p> </li> <li> <p><code>maf_key</code>：两步验证码的 key。</p> </li> <li> <p><code>maf_type</code>：是否开启了两步验证码，0 表示未开启（默认），1 表示开启。</p> </li> <li> <p><code>nickname</code>：昵称。</p> </li> <li> <p><code>password</code>：密码。</p> </li> <li> <p><code>username</code>：用户名。</p> </li> </ul> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-21611.htm">北京宠爱国际动物医疗机构地址（北京宠爱国际动物医疗机构地址查询）</a></p>
                                        <p>下一个：<a href="/news/article-22074.htm">开宠物店去哪里进货渠道（开宠物店去哪里进货渠道好）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-9-4-hiddify-next-node-share.htm" title="「9月4日」最高速度22.5M/S，2024年Hiddify每天更新免费机场订阅节点链接">「9月4日」最高速度22.5M/S，2024年Hiddify每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-22984.htm" title="动物疫苗价格查询表最新（动物接种疫苗多少钱）">动物疫苗价格查询表最新（动物接种疫苗多少钱）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-25-hiddify-next-node-github.htm" title="「11月25日」最高速度21.7M/S，2024年Hiddify每天更新免费机场订阅节点链接">「11月25日」最高速度21.7M/S，2024年Hiddify每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-12-latest-hiddify-next-node.htm" title="「9月12日」最高速度19M/S，2024年Hiddify每天更新免费机场订阅节点链接">「9月12日」最高速度19M/S，2024年Hiddify每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-26688.htm" title="建议穷人养的10种猫母猫和公猫混养（母猫和公猫哪个好养知乎）">建议穷人养的10种猫母猫和公猫混养（母猫和公猫哪个好养知乎）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-5-free-hiddify-next-node.htm" title="「10月5日」最高速度20.9M/S，2024年Hiddify每天更新免费机场订阅节点链接">「10月5日」最高速度20.9M/S，2024年Hiddify每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/news/article-33293.htm" title="芭比堂宠物医院收费（芭比堂宠物医院收费多少）">芭比堂宠物医院收费（芭比堂宠物医院收费多少）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-11-hiddify-next-node-share.htm" title="「12月11日」最高速度20M/S，2024年Hiddify每天更新免费机场订阅节点链接">「12月11日」最高速度20M/S，2024年Hiddify每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-10-latest-hiddify-next-node.htm" title="「10月10日」最高速度18.2M/S，2024年Hiddify每天更新免费机场订阅节点链接">「10月10日」最高速度18.2M/S，2024年Hiddify每天更新免费机场订阅节点链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-11-hiddify-next-node-share.htm" title="「9月11日」最高速度18.5M/S，2024年Hiddify每天更新免费机场订阅节点链接">「9月11日」最高速度18.5M/S，2024年Hiddify每天更新免费机场订阅节点链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">21</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>

        <!-- copyright section -->
    <div class="copyright">
        <div class="container">
            <div class="row">
                <div class="col-md-12 col-sm-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>HiddifyFree免费节点官网 版权所有 Powered by WordPress</p>
                </div>
            </div>
        </div>
    </div>
    <!-- scrolltop section -->
    <a href="#top" class="go-top"><i class="fa fa-angle-up"></i></a>
    <!-- javascript js -->
    <script src="/assets/website/js/frontend/hiddifyfree/jquery.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/nivo-lightbox.min.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/smoothscroll.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/jquery.nav.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/isotope.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/imagesloaded.min.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>