<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://hiddifyfree.github.io/news/article-55941.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>有关JavaScript事件循环的若干疑问探究</title>
        <meta name="description" content="起因 即使我完全没有系统学习过JavaScript的事件循环机制，在经过一定时间的经验积累后，也听过一些诸如宏任务和微任务、JavaScript是单线程的、Ajax和Promise是一种异步操作、se" />
        <link rel="icon" href="/assets/website/img/hiddifyfree/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="HiddifyFree免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://hiddifyfree.github.io/news/article-55941.htm" />
    <meta property="og:site_name" content="HiddifyFree免费节点官网" />
    <meta property="og:title" content="有关JavaScript事件循环的若干疑问探究" />
    <meta property="og:image" content="https://hiddifyfree.github.io/uploads/20240811-1/5966e3d9a3f28846abd02121a626fc1f.webp" />
        <meta property="og:release_date" content="2025-02-13T03:10:37" />
    <meta property="og:updated_time" content="2025-02-13T03:10:37" />
        <meta property="og:description" content="起因 即使我完全没有系统学习过JavaScript的事件循环机制，在经过一定时间的经验积累后，也听过一些诸如宏任务和微任务、JavaScript是单线程的、Ajax和Promise是一种异步操作、se" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="有关JavaScript事件循环的若干疑问探究">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- stylesheet css -->
    <link rel="stylesheet" href="/assets/website/css/hiddifyfree/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/hiddifyfree/font-awesome.min.css">
    <link rel="stylesheet" href="/assets/website/css/hiddifyfree/nivo-lightbox.css">
    <link rel="stylesheet" href="/assets/website/css/hiddifyfree/nivo_themes/default/default.css">
    <link rel="stylesheet" href="/assets/website/css/hiddifyfree/style.css">
    <!-- google web font css -->
    <link href='http://fonts.googleapis.com/css?family=Raleway:400,300,600,700' rel='stylesheet' type='text/css'>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-FSSSCJKV0R"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-FSSSCJKV0R');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-spy="scroll" data-target=".navbar-collapse" data-page="detail">
        <!-- navigation -->
    <div class="navbar navbar-default navbar-fixed-top" role="navigation">
        <div class="container">
            <div class="navbar-header">
                <button class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon icon-bar"></span>
                    <span class="icon icon-bar"></span>
                    <span class="icon icon-bar"></span>
                </button>
                <a href="/" class="navbar-brand">
                                <span>Hiddify Free</span>
                                </a>
            </div>
            <div class="collapse navbar-collapse">
                <ul class="nav navbar-nav navbar-right">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                    </ul>
            </div>
        </div>
    </div>
    <!-- home section -->
    <div id="home">
        <div class="container">
            <div class="row">
                <div class="col-md-offset-6 col-md-6 col-sm-offset-6 col-sm-6">
                    <h1>有关JavaScript事件循环的若干疑问探究</h1>
                    <p>
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- about section -->
    <div id="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h2 id="起因">起因</h2> <p>即使我完全没有系统学习过JavaScript的事件循环机制，在经过一定时间的经验积累后，也听过一些诸如宏任务和微任务、JavaScript是单线程的、Ajax和Promise是一种异步操作、setTimeout会在最后执行等这类的碎片信息，结合实际的代码也可以保证绝大多数情况下代码是按照我希望的顺序执行，但是当我被实际问到这个问题时，发现自己并不能切实地理解这其中的原理，相关的资料有很多，但还是要用自己的理解来表述一遍。</p> <h2 id="为什么要有事件循环">为什么要有事件循环？</h2> <p>首先是个简单的问题，换句话说就是事件循环有什么作用，我为什么要学习这个知识？就像第一段里提到的，众所周知JavaScript是单线程语言，但这并不代表JavaScript不需要异步操作，反向思考一下，如果你所写的所有Ajax操作都是同步的会有什么后果：我们每次向服务端发送请求，整个页面都会因此停滞，直到请求返回，无论响应时间是1毫秒、1秒还是1分钟。对于用户体验来说，这无疑是灾难，所以JavaScript提供了各种异步编程的方式：事件循环、Promise、Generator、Worker等，这里我们还是把目光先聚焦到事件循环上，随着问题的深入，我们会知道事件循环为我们解决了什么问题。</p> <h2 id="事件循环是怎样运作的">事件循环是怎样运作的？</h2> <p>要理解这个问题，推荐先看下这个视频：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.bilibili.com/video/BV1oV411k7XY"  target="_blank" rel="nofollow">到底什么是Event Loop呢？</a>，然后是视频中提到的网站：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://latentflip.com/loupe/?code=c2V0VGltZW91dChmdW5jdGlvbigpIHsNCiAgICBjb25zb2xlLmxvZygnc2V0VGltZW91dCcpOw0KfSkNCg0KbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkgew0KICAgIGNvbnNvbGUubG9nKCdwcm9taXNlJyk7DQp9KS50aGVuKGZ1bmN0aW9uKCkgew0KICAgIGNvbnNvbGUubG9nKCd0aGVuJyk7DQp9KQ0KDQpjb25zb2xlLmxvZygnY29uc29sZScpOw0K!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D"  target="_blank" rel="nofollow">loupe</a>，结合视频我们可以很形象地看到事件是如何在循环中运作的，网站则是根据输入的代码来用动画演示这个过程。</p> <p>顺着视频的思路我们把JavaScript的执行分成几部分：调用栈（Call stack）、事件循环（Event loop）、回调队列（Callback queue）、其他API（Other apis）。</p> <h3 id="调用栈">调用栈</h3> <p>因为JavaScript是单线程的，所以只能一句一句地执行我们的代码，编译器每读到一个函数就把它压入栈中，栈顶的函数返回结果时就弹栈，在这个过程中只有同步函数函数会进入调用栈走正常的执行流程，而<code>setTimeout</code>和<code>Promise</code>这种异步函数则会进入回调队列，形成事件循环的第一步。</p> <h3 id="web-api">Web API</h3> <p>视频中最令我感到意外的是很多我们熟悉的函数并不是JavaScript提供的，而是来自于Web APIs，比如Ajax、DOM、setTimeout等，这些方法的实现并没有出现在V8的源码中，因为它们是由浏览器提供的，更准确地说，应该是运行环境提供的，因为JavaScript的运行环境并不是统一的，不同的浏览器核心就不说了，我们就分成浏览器和Node就可以，看似与我们讨论的事件循环无关，但其中还是存在区别，这个问题我们放在后面说明。</p> <h3 id="任务队列">任务队列</h3> <p>异步方法经过Web API的处理后会进入任务队列，以setTimeout为例就是浏览器提供了一个定时器，当处理这个方法时就在后台启动定时器，达到设定的时间时就将这个方法添加进任务队列，当这一批的同步任务处理完后，JavaScript就会从队列取出方法放入调用栈执行，所以，实际上我们设定的时间是指这个方法<strong>最早</strong>什么时候可以执行，而不是延迟多久执行。我们来看一个例子，可以先脑内运行模拟一下结果：</p> <pre><code class="language-JavaScript">console.log('1')  setTimeout(function setFirstTimeout() {   console.log('2')    new Promise(function (resolve) {     console.log('3')     resolve()   }).then(function () {     console.log('4')   }) },0)  new Promise(function (resolve) {   console.log('5')   resolve() }).then(function () {   console.log('6') })  console.log('7')</code></pre> <p>实际执行一下我们可以得到1、5、7、6、2、3、4这样一个结果，把这段代码放到上文提到的网站里可以很清晰地看到过程，我们定义的<code>setFirstTimeout</code>这一方法经由Web API的处理后进入了Callback Queue，等待主线程的代码执行完，再通过事件循环这一机制进入调用栈。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/cb79a984b95f6f6ae1e4ec94d059c3bc.jpg" alt="有关JavaScript事件循环的若干疑问探究"></p> <p>这样就都说得通了：<code>setTimeout</code>为什么总是在最后执行，但事实真是如此吗？我们看下一个问题。</p> <h2 id="settimeout一定是在所有代码最后执行吗宏任务与微任务">setTimeout一定是在所有代码最后执行吗——宏任务与微任务</h2> <p>即使没有仔细研究过这个问题，根据经验也知道肯定不是这样，虽然setTimeout会相对延迟执行，但并不总是会在所有代码最后执行，这里就涉及一个更大的问题——宏任务与微任务。我们在上文的代码中添加一个DOM操作。</p> <pre><code class="language-JavaScript">console.log('1')  $.on('button','click',function onClick(){     console.log('Clicked'); })  setTimeout(function setFirstTimeout() {   console.log('2')    new Promise(function (resolve) {     console.log('3')     resolve()   }).then(function () {     console.log('4')   }) },0)  new Promise(function (resolve) {   console.log('5')   resolve() }).then(function () {   console.log('6') })  console.log('7')</code></pre> <p>直接看结果，当setTimeout的回调方法进入事件队列后，我点击了绑定了事件的按钮，因此点击的回调方法也进入了事件队列，当同步任务处理完之后，根据队列先入先出的之一原则，setTimeout的回调方法就会先被处理，之后才是点击事件的回调方法。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/edb93b2ea701140b1f350caa6daacbff.jpg" alt="有关JavaScript事件循环的若干疑问探究"></p> <p>不算巧妙的一个例子，但是DOM操作确实与setTimeout同属宏任务这一类别，相对于宏任务的则是微任务，常见分类如下：</p> <p><strong>宏任务</strong></p> <ul> <li>script(整体代码)</li> <li>setTimeout</li> <li>setInterval</li> <li>I/O</li> <li>UI交互事件</li> <li>postMessage</li> <li>MessageChannel</li> <li>setImmediate(Node.js 环境)</li> </ul> <p><strong>微任务</strong></p> <ul> <li>Promise.then</li> <li>Object.observe</li> <li>MutationObserver</li> <li>process.nextTick(Node.js 环境)</li> </ul> <p>其实从上面例子中，应该已经有人发现Promise的执行顺序也不太正常。<code>then</code>中的回调函数既没有跟着<code>Promise</code>执行也没有进入回调队列，这里显然不是程序有Bug，正是因为宏任务与微任务有区别。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/08c523164238570fbbe4dc5e539b9aa1.jpg" alt="有关JavaScript事件循环的若干疑问探究"></p> <p>简单地说，宏任务和微任务各自有着自己的任务队列，执行一个宏任务时，遇到微任务会把它们移到微任务队列中，执行完当前宏任务后再依次执行微任务，让我们把之前的例子再丰富一下：</p> <pre><code class="language-JavaScript">console.log("1");  setTimeout(function s1() {   console.log("2");   process.nextTick(function p2() {     console.log("3");   });   new Promise(function (resolve) {     console.log("4");     resolve();   }).then(function t2() {     console.log("5");   }); }); process.nextTick(function p1() {   console.log("6"); }); new Promise(function (resolve) {   console.log("7");   resolve(); }).then(function t1() {   console.log("8"); });  console.log("9");  setTimeout(function s2() {   console.log("10");   process.nextTick(function () {     console.log("11");   });   new Promise(function (resolve) {     console.log("12");     resolve();   }).then(function () {     console.log("13");   }); });</code></pre> <p>以v16版本的node环境执行结果是：1、7、9、6、8、2、4、3、5、10、12、11、13，其他环境会有差异，我们放在后面说，先看眼前的问题，以<code>process.nextTick</code>是微任务为前提来分析。</p> <ol> <li>执行<code>console.log(1)</code></li> <li>遇到宏任务<code>setTimeout</code>s1，将其添加进<strong>Callback Queue</strong></li> <li>遇到微任务<code>process.nextTick</code>p1，将其添加进<strong>Task Queue</strong></li> <li>执行<code>new Promise</code>中的<code>console.log(7)</code></li> <li>将微任务<code>then</code>t1添加进<strong>Task Queue</strong></li> <li>执行<code>console.log(9)</code></li> <li>遇到宏任务<code>setTimeout</code>s2，将其添加进<strong>Callback Queue</strong></li> </ol> <p>全局的宏任务执行完我们可以得到这样两个队列，和1、7、9的输出，按规则接下来执行这个宏任务中的微任务p1和t1，得到6和8。</p> <table> <thead> <tr> <th>Callback Queue</th> <th>Task Queue</th> </tr> </thead> <tbody> <tr> <td>s1</td> <td>p1</td> </tr> <tr> <td>s2</td> <td>t1</td> </tr> </tbody> </table> <p>继续下一个宏任务s1：</p> <ol> <li>执行<code>console.log(2)</code></li> <li>遇到微任务<code>process.nextTick</code>p2，将其添加进<strong>Task Queue</strong></li> <li>执行<code>new Promise</code>中的<code>console.log(4)</code></li> <li>将微任务<code>then</code>t2添加进<strong>Task Queue</strong></li> </ol> <table> <thead> <tr> <th>Task Queue</th> </tr> </thead> <tbody> <tr> <td>p2</td> </tr> <tr> <td>t2</td> </tr> </tbody> </table> <p>因此，接下来的输出是：2、4、3、5，以此类推，后面的都是差不多的规则，不一一赘述。</p> <h2 id="node与浏览器的eventloop有什么差异">Node与浏览器的EventLoop有什么差异？</h2> <p>上一个问题应该算是解决了，但也引出了一个新问题，之前我提到是以v16版本的node环境来执行，那么如果不是v16版本的node甚至不用node来运行会有什么结果呢？在<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/6844903512845860872"  target="_blank" rel="nofollow">这一次，彻底弄懂 JavaScript 执行机制</a>这篇文章的评论区我看到了一些讨论，v10之前的node在事件循环的处理上与浏览器不同，所以得到了另外的结果，我切换到v10的版本后，得到的还是1、7、9、6、8、2、4、3、5、10、12、11、13这样的结果，个人觉得这里以最新版本为准就好了，不打算深究，有兴趣的可以看下那篇文章的评论区。</p> <p>然后是另一种情况，最开始我是在Vue中验证这段代码的，得到的结果是1、7、9、8、2、4、5、6、10、12、13、3、11，如果是在<code>process.nextTick</code>是宏任务的前提下，这个结果就是正确的，但是这里我不太清楚为什么。另外我想到了Vue中也有一个nextTick方法，查了一下发现又是一个不同的课题，限于篇幅打算另开一篇来学习，具体的内容也可以看下这篇博客<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/6875492931726376974"  target="_blank" rel="nofollow">Vue的nextTick具体是微任务还是宏任务?</a></p> <h2 id="还有什么问题">还有什么问题？</h2> <p>写这一篇博客本来是想弄懂事件循环这一机制的，没想到里面的内容那么多，在我刚上班的时候，遇到过一个问题<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/LFeather/p/10853169.html"  target="_blank" rel="nofollow">JavaScript定时器越走越快的问题</a>，当时我是以为把这个问题搞清楚了，从今天这篇文章的角度回头来看那时候仅仅看到了冰山一角，这篇文章也同样只是写到了事件循环的冰山一角，好在现在我知道这件事了，除了Vue的nextTick这一问题外，还有一个渲染的问题与事件循环相关，之后也会将这部分内容整理成文章，这里先推荐一篇博客和一个视频：</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/6844904165462769678"  target="_blank" rel="nofollow">深入解析你不知道的 EventLoop 和浏览器渲染、帧动画、空闲回调（动图演示）</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.bilibili.com/video/BV1a4411F7t7"  target="_blank" rel="nofollow">深入事件环(In The Loop)</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-55940.htm">Pyspark读取hive表数据进行处理，将结果插入到hive及hbase</a></p>
                                        <p>下一个：<a href="/news/article-56482.htm">[Kafka错误：window下运行一段时间后自动挂掉/宕机]&#8212;&#8211;kafka在window下出现另一个程序正在使用此文件,进程无法访问的错误</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-52664.htm" title="参观动物医院实验报告怎么写 参观动物医院实验报告怎么写的">参观动物医院实验报告怎么写 参观动物医院实验报告怎么写的</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-20-node-share.htm" title="「1月20日」最高速度20.1M/S，2025年Hiddify每天更新免费订阅节点地址分享">「1月20日」最高速度20.1M/S，2025年Hiddify每天更新免费订阅节点地址分享</a></li>
                        <li class="py-2"><a href="/news/article-47513.htm" title="专业卖狗的网站（专业卖狗的网站叫什么）">专业卖狗的网站（专业卖狗的网站叫什么）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-17-hiddify-next-windows.htm" title="「1月17日」最高速度21.2M/S，2025年Hiddify每天更新免费订阅节点地址分享">「1月17日」最高速度21.2M/S，2025年Hiddify每天更新免费订阅节点地址分享</a></li>
                        <li class="py-2"><a href="/news/article-48396.htm" title="南京农大动物医院电话号码（南京农业大学动物医院电话）">南京农大动物医院电话号码（南京农业大学动物医院电话）</a></li>
                        <li class="py-2"><a href="/news/article-55371.htm" title="动物疫苗和人体疫苗的区别是什么呢英语 动物疫苗和人体疫苗的区别是什么呢英语翻译">动物疫苗和人体疫苗的区别是什么呢英语 动物疫苗和人体疫苗的区别是什么呢英语翻译</a></li>
                        <li class="py-2"><a href="/news/article-43072.htm" title="厦门狗狗领养平台 厦门狗狗领养平台有哪些">厦门狗狗领养平台 厦门狗狗领养平台有哪些</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-7-hiddify-next-node-share.htm" title="「1月7日」最高速度20.9M/S，2025年Hiddify每天更新免费订阅节点地址分享">「1月7日」最高速度20.9M/S，2025年Hiddify每天更新免费订阅节点地址分享</a></li>
                        <li class="py-2"><a href="/news/article-51088.htm" title="参观动物园心得100字（参观动物园心得100字作文）">参观动物园心得100字（参观动物园心得100字作文）</a></li>
                        <li class="py-2"><a href="/news/article-50541.htm" title="数据库事务四大特性、四大隔离级别以及解决的三种问题">数据库事务四大特性、四大隔离级别以及解决的三种问题</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">83</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>

        <!-- copyright section -->
    <div class="copyright">
        <div class="container">
            <div class="row">
                <div class="col-md-12 col-sm-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>HiddifyFree免费节点官网 版权所有 Powered by WordPress</p>
                </div>
            </div>
        </div>
    </div>
    <!-- scrolltop section -->
    <a href="#top" class="go-top"><i class="fa fa-angle-up"></i></a>
    <!-- javascript js -->
    <script src="/assets/website/js/frontend/hiddifyfree/jquery.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/nivo-lightbox.min.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/smoothscroll.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/jquery.nav.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/isotope.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/imagesloaded.min.js"></script>
    <script src="/assets/website/js/frontend/hiddifyfree/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>